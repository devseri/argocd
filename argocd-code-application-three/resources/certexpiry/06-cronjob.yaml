apiVersion: batch/v1
kind: CronJob
metadata:
  name: cert-expiry-check
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/sync-wave: "30"
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
  namespace: certexpiry-ns
spec:
  schedule: "*/3 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: listcert
          restartPolicy: OnFailure
          containers:
            - name: cert-expiry-check
              image: registry.access.redhat.com/ubi9/toolbox
              resources:
                limits:
                  cpu: 50m
                  memory: 100Mi
                requests:
                  cpu: 25m
                  memory: 50Mi
              imagePullPolicy: IfNotPresent
              env:
                - name: CLUSTER_NAME
                  value: default
                - name: DAYS_TO_RENEW
                  value: 30
                - name: WEBHOOK_URL
                  valueFrom:
                    secretKeyRef:
                      name: certsecret
                      key: webhook_url
              command:
                - /bin/bash
                - -c
                - |
                      # set -eo pipefail
                      #!/bin/bash
                      

                      wget -O /tmp/jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
                      chmod +x /tmp/jq


                      #yum install jq -y
                      # Point to the internal API server hostname
                      APISERVER=https://kubernetes.default.svc

                      # Path to ServiceAccount token
                      SERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount

                      # Read this Pod's namespace
                      NAMESPACE=$(cat ${SERVICEACCOUNT}/namespace)

                      # Read the ServiceAccount bearer token
                      TOKEN=$(cat ${SERVICEACCOUNT}/token)

                      # Reference the internal certificate authority (CA)
                      CACERT=${SERVICEACCOUNT}/ca.crt

                      echo "starting cert expiry work and $DAYS_TO_RENEW"
                      if [ 5 -le $DAYS_TO_RENEW ]
                      then
                           echo "5 less than 10 printed"
                      fi
                      
                      while IFS= read -r cert
                      do
                          echo "inside while now"
                          #printf 'output -  %s\n' "$line"
                          IFS=' '
                          read -a cert_info_arr <<<"$cert"
                          cert_name=${cert_info_arr[0]}
                          cert_namespace=${cert_info_arr[1]}
                          cert_renewaltime=${cert_info_arr[2]}
                          cert_notafter=${cert_info_arr[3]}
                          payload_message="For cluster, $CLUSTER_NAME, "


                          if [ ! -z "$cert_renewaltime" ]  && [ "$(date -d "$cert_renewaltime" +%Y-%m-%d 2> /dev/null)" = "$2" ]
                          then

                               payload_message+="Renewal date for Certificate '$cert_name' inside NameSpace '$cert_namespace' is not available. Please revalidate."
                               echo $payload_message
                               continue
                          fi
                          cert_renewaltime=`date -d $cert_renewaltime +'%Y%m%d'`

                          current_date=$(date '+%Y%m%d')
                          let days_to_renew=($(date +%s -d $cert_renewaltime)-$(date +%s -d $current_date))/86400
                          if [ "$days_to_renew" -le $DAYS_TO_RENEW ]
                          then
                              expiry_date=`date -d $cert_notafter +'%Y-%m-%d'`

                              if [ "$days_to_renew" -lt 1 ]
                              then
                                      payload_message+="The Certificate '$cert_name' inside NameSpace '$cert_namespace' is either expired or expiring today. Expiry data is  $expiry_date."
                              else
                                      payload_message+="Renewal for Certificate '$cert_name' inside NameSpace '$cert_namespace' is due in $days_to_renew days. This certificate will expire on $expiry_date."
                              fi

                              echo $payload_message

                         fi

                      done < <(curl -s --cacert ${CACERT} --header "Authorization: Bearer ${TOKEN}" -X GET ${APISERVER}/apis/cert-manager.io/v1/certificates | /tmp/jq -r '.items[] | "\(.metadata.name) \(.metadata.namespace) \(.status.renewalTime) \(.status.notAfter)"')
